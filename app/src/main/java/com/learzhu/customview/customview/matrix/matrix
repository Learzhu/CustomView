Matrix简介
Matrix是一个矩阵，主要功能是坐标映射，数值转换。
我们所用到的变换均属于仿射变换，仿射变换是 线性变换(缩放，旋转，错切) 和 平移变换(平移) 的复合
基本变换有4种: 平移(translate)、缩放(scale)、旋转(rotate) 和 错切(skew)。

我们的内容区和屏幕坐标系还相差一个通知栏加一个标题栏的距离，所以两者是不重合的，
我们在内容区的坐标系中的内容最终绘制的时候肯定要转换为实际的物理坐标系来绘制，Matrix在此处的作用就是转换这些数值。
实际上不论2D还是3D，我们要将图形显示在屏幕上，都离不开Matrix，所以说Matrix是一个在背后辛勤工作的劳模。


1.认为Matrix最下面的一行的三个参数(MPERSP_0、MPERSP_1、MPERSP_2)没有什么太大的作用，在这里只是为了凑数。

实际上最后一行参数在3D变换中有着至关重要的作用，这一点会在后面中Camera一文中详细介绍。

2.最后一个参数MPERSP_2被解释为scale

的确，更改MPERSP_2的值能够达到类似缩放的效果，但这是因为齐次坐标的缘故，并非这个参数的实际功能。

Matrix特点

作用范围更广，Matrix在View，图片，动画效果等各个方面均有运用，相比与之前讲解等画布操作应用范围更广。

更加灵活，画布操作是对Matrix的封装，Matrix作为更接近底层的东西，必然要比画布操作更加灵活。

封装很好，Matrix本身对各个方法就做了很好的封装，让开发者可以很方便的操作Matrix。

难以深入理解，很难理解中各个数值的意义，以及操作规律，如果不了解矩阵，也很难理解前乘，后乘。


Matrix复合原理
其实Matrix的多种复合操作都是使用矩阵乘法实现的，从原理上理解很简单，但是，使用矩阵乘法也有其弱点，后面的操作可能会影响到前面到操作，所以在构造Matrix时顺序很重要。

我们常用的四大变换操作，每一种操作在Matrix均有三类,前乘(pre)，后乘(post)和设置(set)，可以参见文末对Matrix方法表，由于矩阵乘法不满足交换律，所以前乘(pre)，后乘(post)和设置(set)的区别还是很大的。

前乘(pre)
//使用pre，越靠后越先执行。
前乘相当于矩阵的右乘：
        M1=M*S

这表示一个矩阵与一个特殊矩阵前乘后构造出结果矩阵。
后乘(post)
//使用post，越靠前越先执行。
前乘相当于矩阵的左乘：
        M1=S*M


这表示一个矩阵与一个特殊矩阵后乘后构造出结果矩阵。


设置(set)

设置使用的不是矩阵乘法，而是直接覆盖掉原来的数值，所以，使用设置可能会导致之前的操作失效。

组合
我们使用Matrix最终目的就是让视图显示为我们想要的状态，为此我们可能需要多种操作结合使用。

我发现很多讲解Matrix的文章喜欢用绕某一个点缩放(旋转)的示例来讲解，如下:

那么我们如果想让它基于图片中心缩放，应该该怎么办？要用到组合变换，
  1）先将图片由中心平移到原点，这是应用变换 T
  2）对图应用缩放变换 S
  3）再将图片平移回到中心，应用变换 -T

    对应代码:
    matrix.postScale(0.5f, 0.5f);
    matrix.preTranslate(-pivotX, -pivotY);
    matrix.postTranslate(pivotX, pivotY);


等价于：matrix.postScale(0.5f, 0.5f, pivotX, pivotY);

组合操作构造Matrix时，个人建议尽量全部使用后乘或者全部使用前乘，这样操作顺序容易确定，出现问题也比较容易排查。
当然，由于矩阵乘法不满足交换律，前乘和后乘的结果是不同的，使用时应结合具体情景分析使用。

(x, y, 1) - 点
(x, y, 0) - 向量